install.packages(c("DOS", "factoextra"))
usethis::use_package("optmatch")
usethis::use_package("optmatch")
library(optmatch)
usethis::use_package("optmatch")
usethis::use_package("survival")
usethis::use_package("optmatch")
usethis::use_package("optmatch")
getwd()
usethis::use_package("audio")
devtools::check()
library(devtools)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_readme_md()
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::check()
##########
# N=1000 #
##########
# Create Test Data
library(MASS)
library(factoextra)
library(DOS)
set.seed(18201) # make sure data is repeatable
N=1000
Sigma <- matrix(.2,3,3)
diag(Sigma) <- 1
data<-matrix(MASS::mvrnorm(N, mu=rep(0, 3), Sigma, empirical = FALSE) , nrow=N, ncol = 3)
# User original data
mydata<- as.data.frame(data) # create dataframe
mydata$sex<- rbinom(n=1000, size=1, prob=0.5)
mydata$race<- rbinom(n=1000, size=2, prob=.50)
mydata$CaCo<- c(rep(1, 100), rep(0, 900)) # case control status
mydata$id<- c(1001:2000) # create an id variable
head(mydata)
# Preform PCA on user data
data.pca <- stats::prcomp(mydata[,1:3], scale = TRUE, center = TRUE)
summary(data.pca)
# Create Eigen values
eig.val <- factoextra::get_eigenvalue(data.pca)
eigen_values<- eig.val[,1]
eigen_values
# Create Individual PCs
data.ind <- factoextra::get_pca_ind(data.pca)
PCs<- as.data.frame(data.ind$coor) # This is the main loading for PCAmatchR
PCs$id<- mydata$id
head(PCs)
devtools::load_all(".")
test<- PCAmatchR(eigen_value= eigen_values, PC= PCs, data=mydata[,c(4:7)], ids=c("id"), z=c("CaCo") , controls=1, num_variants= 3)
View(eig.val)
set.seed(18201) # make sure data is repeatable
N=100
Sigma <- matrix(.2,3,3)
diag(Sigma) <- 1
data<-matrix(MASS::mvrnorm(N, mu=rep(0, 3), Sigma, empirical = FALSE) , nrow=N, ncol = 3)
# User original data
mydata<- as.data.frame(data) # create dataframe
mydata$sex<- rbinom(n=100, size=1, prob=0.5)
mydata$race<- rbinom(n=100, size=2, prob=.50)
mydata$CaCo<- c(rep(1, 10), rep(0, 90)) # case control status
mydata$id<- c(1001:1100) # create an id variable
head(mydata)
# Preform PCA on user data
data.pca <- stats::prcomp(mydata[,1:3], scale = TRUE, center = TRUE)
summary(data.pca)
# Create Eigen values
eig.val <- factoextra::get_eigenvalue(data.pca)
eigen_values<- eig.val[,1]
eigen_values
# Create Individual PCs
data.ind <- factoextra::get_pca_ind(data.pca)
PCs<- as.data.frame(data.ind$coor) # This is the main loading for PCAmatchR
PCs$id<- mydata$id
head(PCs)
# 1 to 1 matching
test<- PCAmatchR(eigen_value= eigen_values, PC= PCs, data=mydata[,c(4:7)], ids=c("id"), z=c("CaCo") , controls=1, num_variants= 3)
test$matches
test$weights
?
PCAmatchR()
devtools::load_all(".")
?
PCAmatchR()
devtools::load_all(".")
? PCAmatchR()
devtools::load_all(".")
? PCAmatchR()
q()
devtools::load_all(".")
?
PCAmatchR()
library(MASS)
library(factoextra)
library(DOS)
N=100
Sigma <- matrix(.2,3,3)
diag(Sigma) <- 1
data<-matrix(MASS::mvrnorm(N, mu=rep(0, 3), Sigma, empirical = FALSE) , nrow=N, ncol = 3)
# User original data
mydata<- as.data.frame(data) # create dataframe
mydata$sex<- rbinom(n=100, size=1, prob=0.5)
mydata$race<- rbinom(n=100, size=2, prob=.50)
mydata$CaCo<- c(rep(1, 10), rep(0, 90)) # case control status
mydata$id<- c(1001:1100) # create an id variable
head(mydata[,c(4:7)])
data.pca <- stats::prcomp(mydata[,1:3], scale = TRUE, center = TRUE)
summary(data.pca)
# Create Eigen values
eig.val <- factoextra::get_eigenvalue(data.pca)
eigen_values<- eig.val[,1]
eigen_values
data.ind <- factoextra::get_pca_ind(data.pca)
PCs<- as.data.frame(data.ind$coor) # This is the main loading for PCAmatchR
PCs$id<- mydata$id
head(PCs)
# 1 to 1 matching
test<- PCAmatchR(eigen_value= eigen_values, PC= PCs, data=mydata[,c(4:7)], ids=c("id"), z=c("CaCo") , controls=1, num_PCs= 3)
test$matches
class(test)
test$weights
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all(".")
library(MASS)
library(factoextra)
library(DOS)
set.seed(18201) # make sure data is repeatable
N=100
Sigma <- matrix(.2,3,3)
diag(Sigma) <- 1
data<-matrix(MASS::mvrnorm(N, mu=rep(0, 3), Sigma, empirical = FALSE) , nrow=N, ncol = 3)
# User original data
mydata<- as.data.frame(data) # create dataframe
mydata$sex<- rbinom(n=100, size=1, prob=0.5)
mydata$race<- rbinom(n=100, size=2, prob=.50)
mydata$CaCo<- c(rep(1, 10), rep(0, 90)) # case control status
mydata$id<- c(1001:1100) # create an id variable
head(mydata[,c(4:7)])
# Preform PCA on user data
data.pca <- stats::prcomp(mydata[,1:3], scale = TRUE, center = TRUE)
summary(data.pca)
# Create Eigen values
eig.val <- factoextra::get_eigenvalue(data.pca)
eigen_values<- eig.val[,1]
eigen_values
# Create Individual PCs
data.ind <- factoextra::get_pca_ind(data.pca)
PCs<- as.data.frame(data.ind$coor) # This is the main loading for PCAmatchR
PCs$id<- mydata$id
head(PCs)
# Unweighted: 1 to 1 matching
test<- PCAmatchR(eigen_value= eigen_values, PC= PCs, data=mydata[,c(4:7)], ids=c("id"), case_control=c("CaCo"), num_controls=1, num_PCs= 3, weight_dist=FALSE)
test$matches
test$weights  #NULL becuase we did performed unweighted distance matching.
# Unweighted: 1 to 1 matching
test<- PCAmatchR(eigen_value= eigen_values, PC= PCs, data=NULL, ids=c("id"), case_control=c("CaCo"), num_controls=1, num_PCs= 3, weight_dist=FALSE)
# Unweighted: 1 to 1 matching
test<- PCAmatchR(eigen_value= eigen_values, PC= PCs, data=mydata[,c(4:7)], ids=NULL, case_control=c("CaCo"), num_controls=1, num_PCs= 3, weight_dist=FALSE)
# Unweighted: 1 to 1 matching
test<- PCAmatchR(eigen_value= eigen_values, PC= PCs, data=NULL, ids=c("id"), case_control=NULL, num_controls=1, num_PCs= 3, weight_dist=FALSE)
